<?xml version="1.0" encoding="utf-8"?> 
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xsi:schemaLocation="  
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd"  
             default-lazy-init="false"> 
            
        <!-- 启用注解 -->
		<context:annotation-config />
		
		<!--指定jdbc配置文件 -->
  		<!-- <context:property-placeholder    location="classpath:jdbc.properties" /> -->
		<!-- 读取参数配置 -->
		<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
			<property name="locations">  
				<list>  
	                 <value>/WEB-INF/classes/jdbc.properties</value>
					 <!-- <value>/WEB-INF/classes/redis.properties</value>   -->
	            </list>  
	        </property>  
		</bean> 
		
		<!-- 数据库连接池 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"> 
			<property name="driverClassName" value="${driverClassName}" /> 
			<property name="url" value="${url}" /> 
			<property name="username" value="${username}"/> 
			<property name="password" value="${password}"/> 
		</bean> 
		
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
      		<property name="dataSource" ref="dataSource" />
    	</bean>
		<!-- sql会话模版 -->
		<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
			<constructor-arg ref="sqlSessionFactory" />
		</bean>
		
		<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
     	<!--dataSource属性指定要用到的连接池--> 
     		<property name="dataSource" ref="dataSource"/> 
     	<!--configLocation属性指定mybatis的核心配置文件--> 
     		<property name="configLocation" value="classpath:Configuration.xml" /> 
     	<!-- 自动扫描所有配置的mapper文件 -->
     		<property name="mapperLocations" value="classpath*:mapper/*.xml" />
  		</bean> 
  		
  		<!-- dao接口所在包名，Spring会自动查找其下的类 -->
  		<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
			<property name="basePackage" value="com.slby.dao.*" />
			<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />	 
  		</bean>
		 
		 
		<!-- 启动组件扫描，排除@Controller组件，该组件由SpringMVC配置文件扫描 -->
		<context:component-scan base-package="com.slby">
			<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		</context:component-scan>
		<!-- mapper对应文件。由上面替换进行
		<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean"> 
			sqlSessionFactory属性指定要用到的SqlSessionFactory实例 
			<property name="sqlSessionFactory" ref="sqlSessionFactory" /> 
			mapperInterface属性指定映射器接口，用于实现此接口并生成映射器对象 
			<property name="mapperInterface" value="com.mybatis.inter.IUserOperation" />
		</bean>   -->
		<!--配置作业类 -->
<!-- 		<bean name="TaskTest" class="org.springframework.scheduling.quartz.JobDetailBean"> -->
<!-- 			<property name="jobClass" value="com.mybatis.util.TaskTest" /> -->
<!-- 			<property name="jobDataAsMap"> -->
<!-- 				<map> -->
<!-- 					<entry key="timeout" value="0" /> -->
<!-- 				</map> -->
<!-- 			</property> -->
<!-- 		</bean> -->
		<!--配置触发器   第一种SimpleTriggerBean，只支持按照一定频度调用任务，如每隔30分钟运行一次-->
<!-- 		<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean"> -->
<!-- 			<property name="jobDetail" ref="TaskTest" /> -->
<!--  			<property name="startDelay" value="0" />调度工厂实例化后，经过0秒开始执行调度 -->
<!-- 			<property name="repeatInterval" value="10000" />每2秒调度一次 -->
<!-- 		</bean> -->
		
		<!--配置触发器 第二种CronTriggerBean，支持到指定时间运行一次，如每天12:00运行一次等-->
<!-- 		<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean"> -->
<!-- 			<property name="jobDetail" ref="TaskTest" />   -->
<!--  			每天12:00运行一次  -->
<!-- 			<property name="cronExpression" value="0 53 15 * * ?" /> -->
<!-- 		</bean>   -->

		<!--配置调度工厂 -->
<!-- 		<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> -->
<!-- 			<property name="triggers"> -->
<!-- 				<list> -->
<!-- 					<ref bean="simpleTrigger" /> -->
<!-- 				</list> -->
<!-- 			</property> -->
<!-- 		</bean>   -->
</beans> 