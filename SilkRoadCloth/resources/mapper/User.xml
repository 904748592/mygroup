<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.slby.dao.UserDao">
<!-- 每个实体都应该到Configuration.xml中进行mapper配置对应 -->



<!-- 为了返回list类型而定义的returnMap -->
	<resultMap type="User" id="resultListUser">
		<id column="id" property="id" />
		<result column="usercode" property="usercode" />
		<result column="password" property="password" />
		<result column="username" property="username" />
		<result column="createtime" property="createtime" />
		<result column="telephone" property="telephone" />
		<result column="email" property="email" />
		<result column="realname" property="realname" />
		<result column="leftmoney" property="leftmoney" />
		<result column="usemoney" property="usemoney" />
		<result column="status" property="status" />
		<result column="type" property="type" />
	</resultMap>
	
	
<!-- 通过id查询 -->
    <select id="selectUserByID" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>
<!-- 通过userName查询返回list -->
    <select id="selectUsers" parameterType="String" resultMap="resultListUser">
    	select * from user where username like #{username}
    </select>
    
    
<!--执行增加操作的SQL语句。id和parameterType分别与IUserOperation接口中的addUser方法的名字和  
参数类型一致。以#{userName}的形式引用User参数 的userName属性，MyBatis将使用反射读取User参数  
的此属性。#{userName}中大小写敏感。引用其他 的userAge等属性与此一致。useGeneratedKeys设置  
为"true"表明要MyBatis获取由数据库自动生成的主 键；keyProperty="id"指定把获取到的主键值注入  
 到User的id属性--> 
    <insert id="addUser" parameterType="User" 
        useGeneratedKeys="true" keyProperty="id"> 
        insert into user(usercode,password,username,createtime,telephone,email,realname,leftmoney,usemoney,status,type)  
             values(#{usercode},#{password},#{username},NOW(),#{telephone},#{email},#{realname},0,0,1,#{type})  
    </insert>
    
    
<!-- 修改一条用户信息 -->
    <update id="updateUser" parameterType="User">
<!--     	update user set userName=#{userName},userAge=#{userAge},userAddress=#{userAddress}  -->
<!--     	where id=#{id} -->
    </update>
    
    
<!-- 删除一个用户的数据 -->
    <delete id="deleteUser" parameterType="int">
    	delete from user where id=#{id}
    </delete>
    
 <!-- 多对一的联表查询配置方法一 -->
 	<!-- <resultMap id="resultUserArticleList" type="Article">
 		<id property="aid" />
 		<result property="title" column="title" />
 		<result property="content" column="content" />
 		
 		<association property="user" javaType="User">
 			<id property="id" column="id" />
 			<result property="userName" column="userName" />
 			<result property="userAddress" column="userAddress" />
 		</association>
 	</resultMap> -->
 	
<!-- 多对一的联表查询配置方法二 -->
 	<!-- <resultMap id="resultUserArticleList" type="Article">
 		<id property="aid" />
 		<result property="title" column="title" />
 		<result property="content" column="content" />
 		
 		<association property="user" javaType="User" resultMap="resultListUser" />		
 	</resultMap> -->
 	 	
 <!-- 多对一联表查询方法 -->
 	<!-- <select id="getUserArticles" parameterType="int" resultMap="resultUserArticleList">
 		select user.id,user.userName,user.userAddress,article.id aid,article.title,article.content 
 		from user,article where user.id=article.userid and user.id=#{id}
 	</select> -->
</mapper>

